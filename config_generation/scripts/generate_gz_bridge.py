import os
import yaml

SIMLAN_GAZEBO_ENVIRONMENT_PKG_PATH = os.path.expanduser("~/src/simulation/simlan_gazebo_environment")

def generate_gz_bridge(robots):
    bridges = [
        {
            "ros_topic_name": "clock",
            "gz_topic_name": "/world/default/clock",
            "ros_type_name": "rosgraph_msgs/msg/Clock",
            "gz_type_name": "gz.msgs.Clock",
            "direction": "GZ_TO_ROS"
        },
        {
            "ros_topic_name": "tf",
            "gz_topic_name": "tf",
            "ros_type_name": "tf2_msgs/msg/TFMessage",
            "gz_type_name": "gz.msgs.Pose_V",
            "direction": "GZ_TO_ROS"
        },
        {
            "ros_topic_name": "joint_states",
            "gz_topic_name": "joint_states",
            "ros_type_name": "sensor_msgs/msg/JointState",
            "gz_type_name": "gz.msgs.Model",
            "direction": "GZ_TO_ROS"
        }
    ]

    for robot in robots:
        namespace = robot["namespace"]
        robot_type = robot["robot_type"]
        if robot_type == "pallet_truck":
            bridges.append({
                "ros_topic_name": f"{namespace}/contact",
                "gz_topic_name": f"/world/default/model/{namespace}/link/{namespace}/base_link/sensor/{namespace}/contact_sensor/contact",
                "ros_type_name": "ros_gz_interfaces/msg/Contacts",
                "gz_type_name": "gz.msgs.Contacts",
                "direction": "GZ_TO_ROS"
            })

    file="gz_bridge.yaml"
    output_path = os.path.join(SIMLAN_GAZEBO_ENVIRONMENT_PKG_PATH, "config", file)

    yaml_comment = """\
#######################################################################################################################################
# This gz_bridge config was auto generated by /home/ros/src/simulation/pallet_truck/pallet_truck_bringup/launch/generate_gz_bridge.py #
#######################################################################################################################################"""

    def dump_with_spacing(data_list):
        dumped_items = []
        for item in data_list:
            dumped_yaml = yaml.dump(item, sort_keys=False).strip()
            dumped_items.append(f"- {dumped_yaml.replace('\n', '\n  ')}")
        return '\n\n'.join(dumped_items)

    with open(output_path, 'w') as f:
        f.write(yaml_comment + '\n\n')
        f.write(dump_with_spacing(bridges))
    
    print(f"Generated config: {file}")